data2$LON_analyser[dr] = sub(paste("\\",sub("%deg","",info$POSITION_format),sep = ""),"" ,data2$LON_analyser[dr])}
}
data2$LAT_analyser = as.numeric(data2$LAT_analyser)
data2$LON_analyser = as.numeric(data2$LON_analyser)
# transfer to analyser info and wipe info to be replaced by matching CTD data
data2$STNNBR_analyser = data2$STNNBR
data2$CASTNO_analyser = data2$CASTNO
data2$STNNBR[data2$STNNBR != "U"] = NA
data2$CASTNO[data2$CASTNO != "U"] = NA
#### Write the new file
# new file name and path
if(duplicate){new_file = paste(paste(ex,"PIG",info$source,info$Method,dup_id,sep = "_"),".csv",sep = "")}else{
new_file = paste(paste(ex,"PIG",info$source,info$Method,sep = "_"),".csv",sep = "")}
new_file_path = file.path(out_dir,new_file)
# if the file exists, delete it
if(file.exists(new_file_path)){unlink(new_file_path)}
# if(exists("sub_meta")){
#   files = list()
#     for(sb in 1:nrow(sub_meta)){
#     files = c(files, list.files(path = sub_meta[sb,]$path, pattern = sub_meta[sb,]$extention,full.names = T,recursive = F))}
#   files = unlist(files)
#   }else{
# files = list.files(path = info$path, pattern = info$extention,full.names = T,recursive = F)}
subsource = source_info %>% filter(source == info$source)
subsource$citations = trimws(subsource$citations)
submethod = method_info %>% filter(Method == info$Method, analysis_type == info$analysis_type)
submethod$citation = trimws(submethod$citation)
cite_tags = c(unlist(strsplit(info$citation,";" )), unlist(strsplit(subsource$citations,";" )))
cite_tags = trimws(cite_tags[is.character(cite_tags)])
# reformat and write new file
fd <- file(new_file_path, open = "wt")
writeLines(paste(info$Data_type,gsub("-","",Sys.Date()),userID, sep = ""), fd)
writeLines("#semi-manual exchange", fd)
writeLines(paste("#ORIGINAL_CHLFILE/S:", list.files(info$path,full.names = F,recursive = F, include.dirs = F)), fd)
writeLines(paste("#CHLFILE_MOD_DATE:",Sys.time(),"AEST"), fd)
writeLines(paste("#SOURCED_FROM: ", info$source, "(",subsource$url,")", sep = ""), fd)
writeLines(paste("#ANALYSIS_METHOD:", paste(submethod$long_AT, "according to the", submethod$Method, "method. See BIOMATE supplementary information and method citations for more information.")), fd)
if(is.empty(info$contact)){writeLines(paste("#DATASET_CONTACT:", info$PI),fd)}else{
writeLines(paste("#DATASET_CONTACT: ", info$PI,"(",info$contact,")", sep = ""),fd)}
writeLines(paste("#DOI/s:", paste(bib[trimws(unlist(strsplit(info$citation,";" )))]$doi, collapse = ",")), fd)
writeLines(paste("#BIOMATE_CITE_TAGS:", paste(cite_tags, collapse = ",")), fd)
dcite = format(bib[cite_tags], style = "text", .bibstyle = "BIOMATE")
dcite = gsub(pattern = "\n", replacement = " ", dcite)
writeLines(paste("#DATA_CITATION/S:", paste(dcite , collapse = "\n# and ")), fd)
if(!is.empty(submethod$citation)){
mcite = format(bib[submethod$citation], style = "text", .bibstyle = "BIOMATE")
mcite = gsub(pattern = "\n", replacement = " ", mcite)
writeLines(paste("#METHOD_CITATION/S:", paste(mcite, collapse = "\n# and ")), fd)}
if(!is.empty(info$Notes)){writeLines(paste("#NOTE:", info$Notes), fd)}
#### CTD_data ###
# get matches and append data
data2$CTD_IDs = NA
# list available CTD_IDs
if(any(is.na(data2$STNNBR))){
data2$CTD_IDs[data2$STNNBR_analyser == "U"] = "U"
# ctd_ids from CTD files
CTD_IDs = unlist(strsplit(ctd_files,"_ctd1.csv"))
# create a data frame with split info
ctd_split = strsplit(CTD_IDs, split = "_")
CTD_info = data.frame("CTD_ID" = CTD_IDs, "EXPOCODE" = sapply(ctd_split, "[[", 1), "STNNBR" = sapply(ctd_split, "[[", 3), "CASTNO"= sapply(ctd_split, "[[", 4), stringsAsFactors = F)
### match based on STNNBR and CASTNO ###
# CTD stnnbr can be longer but pigment cant be (this accounts for when a cast number is specified in the station number - easy fix)
# need to remove exact matches so they dont pop up in inexact matches
CTD_info = CTD_info %>% mutate(STNCAST = paste(STNNBR, CASTNO))
data2_stncast = paste(data2$STNNBR_analyser,data2$CASTNO_analyser)
CTD_info = CTD_info %>% filter(EXPOCODE == ex)
# exact matches
CTD_info_exact = CTD_info %>% filter(EXPOCODE == ex, STNCAST %in% data2_stncast)
sdx = data2_stncast %in% CTD_info_exact$STNCAST
### check that the CTD matches match in date and position - if they don't different station numbers have been used for PIG and PROF
if(nrow(CTD_info_exact) > 0){
for(idx in 1:nrow(CTD_info_exact)){
if(!grepl(CTD_info_exact$CTD_ID[idx],ctd_files2)){
ctd_file = file.path(ctd_path,paste(CTD_info_exact$CTD_ID[idx],"_ctd1.csv",sep = ""))}else{
file.path(ctd_path2,paste(CTD_info_exact$CTD_ID[idx],"_ctd1.csv",sep = ""))
}
sub_data2 = data2 %>% filter(STNNBR_analyser == CTD_info_exact$STNNBR[idx],CASTNO_analyser == CTD_info_exact$CASTNO[idx], !is.na(LAT_analyser))
if(nrow(sub_data2) == 0){next}
# open file and read relevent lines
f <- file( ctd_file, open = "r" )
time_s = NA
time_b = NA
time_e = NA
while( TRUE ){
line <- readLines( f, 1L ,skipNul = T)
if( grepl( "DATE =", line ) ){
CTD_info_exact$DATE[idx] <- trimws(sub("DATE =", "", line ))
date = CTD_info_exact$DATE[idx]
}
if( grepl( "CTD_START_TIME =", line ) ){
t_line = line
time_s<- trimws(sub("UTC","",sub("CTD_START_TIME =", "", line )))
}
if( grepl( "CTD_BOTTOM_TIME =", line ) ){
time_b <- trimws(sub("UTC","",sub( "CTD_BOTTOM_TIME =", "", line )))
}
if( grepl( "CTD_END_TIME =", line ) ){
time_e <- trimws(sub("UTC","",sub( "CTD_END_TIME =", "", line )))
}
if( grepl( "CTD_START_LATITUDE =", line ) ){
CTD_info_exact$LATITUDE_s[idx] <- as.numeric(sub("CTD_START_LATITUDE =", "", line ))
}
if( grepl( "CTD_START_LONGITUDE =", line ) ){
CTD_info_exact$LONGITUDE_s[idx] <- as.numeric(sub("CTD_START_LONGITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LATITUDE =", line ) ){
CTD_info_exact$LATITUDE_b[idx] <- as.numeric(sub("CTD_BOTTOM_LATITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LONGITUDE =", line ) ){
CTD_info_exact$LONGITUDE_b[idx] <- as.numeric(sub("CTD_BOTTOM_LONGITUDE =", "", line ))
}
if( grepl( "CTD_END_LATITUDE =", line ) ){
CTD_info_exact$LATITUDE_e[idx] <- as.numeric(sub("CTD_END_LATITUDE =", "", line ))
}
if( grepl( "CTD_END_LONGITUDE =", line ) ){
CTD_info_exact$LONGITUDE_e[idx] <- as.numeric(sub("CTD_END_LONGITUDE =", "", line ))
}
if(grepl("CTDPRS", line)){break}
}
close(f)
# get closest time difference
times = as.POSIXct(c(paste(date,time_s), paste(date,time_b), paste(date,time_e)), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# check forward in time, if not add 24 hrs as likely crossed days.
if(!is.na(times[2]) & !is.na(times[1])){
t_diff_check = difftime(times[2], times[1], units = "secs")
if(t_diff_check < 0){times[2] = times[2] + (3600*24)}
}
if(!is.na(times[3]) & !is.na(times[1])){
t_diff_check = difftime(times[3],  times[1], units = "secs")
if(t_diff_check < 0){times[3] = times[3] + (3600*24)}
}
CTD_info_exact$TIME_s[idx] = times[1]
CTD_info_exact$TIME_b[idx] = times[2]
CTD_info_exact$TIME_e[idx] = times[3]
times = times[!is.na(times)]
if(length(times) > 0 & !is.na(sub_data2$DATE_analyser[1])){
t_diffs = abs(difftime(times, as.POSIXct(paste(sub_data2$DATE_analyser[1],sub_data2$TIME_analyser[1]),tz = "UTC"), units = "secs"))
CTD_info_exact$t_diff[idx] = t_diffs[which.min(t_diffs)]}else{
CTD_info_exact$t_diff[idx] = NA}
# if the same date is recorded come up as match.
if(length(times) == 0 & CTD_info_exact$DATE[idx] == sub_data2$DATE_analyser[1]){CTD_info_exact$t_diff[idx] = 1*60*60*24}
# get position difference
pos = matrix(c(CTD_info_exact$LONGITUDE_s[idx], CTD_info_exact$LATITUDE_s[idx],CTD_info_exact$LONGITUDE_b[idx], CTD_info_exact$LATITUDE_b[idx],CTD_info_exact$LONGITUDE_e[idx], CTD_info_exact$LATITUDE_e[idx]) , ncol = 2, byrow =T)
pos_diff = distGeo(pos, c(sub_data2$LON_analyser[1], sub_data2$LAT_analyser[1]))
CTD_info_exact$p_diff[idx] = pos_diff[which.max(pos_diff)]
# identify if missmatch
if(!is.empty(CTD_info_exact$p_diff[idx]) & !is.na(CTD_info_exact$t_diff[idx])){
#note here t_diff is in days
# use Johnson 2017 suggestion 8km and 1 day
if(CTD_info_exact$p_diff[idx] > 8000 | CTD_info_exact$t_diff[idx] > 1*60*60*24){CTD_info_exact$nomatch[idx] = T}else{CTD_info_exact$nomatch[idx] = F}
}else{CTD_info_exact$nomatch[idx] = T}
}
if(any(CTD_info_exact$nomatch)){print("PROF and PIG station mismatch detected. Moving to closest PROF detection method.")}else{
# asign CTD_IDs
data2$CTD_IDs[sdx] = paste(ex,"CTD",data2$STNNBR_analyser[sdx],data2$CASTNO_analyser[sdx],sep = "_")
}
rm(sub_data2, times)
}
#was trying to find similar matches.... waste of time
# CTD_info_notexact = CTD_info %>% filter(EXPOCODE == ex, !(STNCAST %in% data2_stncast), grepl(paste(unique(data2$STNNBR), collapse="|"),STNNBR), )
# CTD_info_exact$STNCAST_2 = CTD_info_exact$STNCAST
# if(nrow(CTD_info_notexact) > 0){
# CTD_info_notexact$STNCAST_2 = NA
# remaining_stnnbrs = unique(data2$STNNBR)[-grep(paste(CTD_info_exact$STNNBR, collapse="|"), unique(data2$STNNBR))]
# CTD_info_notexact$STNCAST_2 = unlist(lapply(CTD_info_notexact$STNNBR,FUN = function(x){a =paste(remaining_stnnbrs[stri_detect_fixed(x,remaining_stnnbrs)])
#                                                                                         if(length(a)== 0){return(NA)}else{return(a)}
#                                                                                       }))
# CTD_info_f = rbind(CTD_info_exact, CTD_info_notexact)}
# else{CTD_info_f = CTD_info_exact}
### unmatched CTD casts ###
un = is.na(data2$CTD_IDs)
if(any(un)){
# unmatched data
unmatched_df = data.frame("STNCAST" = data2_stncast[un],"Time" = as.character(data2$TIME_analyser[un]), "Date" = as.character(data2$DATE_analyser[un]), "LAT" = data2$LAT_analyser[un],  "LON" = data2$LON_analyser[un], stringsAsFactors = F)
unmatched_df = unmatched_df[!duplicated(unmatched_df$STNCAST),]
# can only match when time AND position info available
unmatched_df_t = unmatched_df %>% filter(!is.na(Time), !is.empty(Time), !is.empty(Date)) %>%
mutate(time_m = as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
notime = ifelse(nrow(unmatched_df_t) == 0,T,F)
unmatched_df_p = unmatched_df %>% filter(!is.na(LAT))
nopos = ifelse(nrow(unmatched_df_p) == 0,T,F)
if(!nopos){
# get ctd basic information
CTD_df = data.frame("CTD_ID" = character(),"DATE" = character(), "TIME_s" = as.POSIXct(character()), "TIME_b"= as.POSIXct(character()), "TIME_e"= as.POSIXct(character()), "LAT_s"=numeric(), "LON_s" = numeric(), "LAT_b"=numeric(), "LON_b" = numeric(), "LAT_e"=numeric(), "LON_e" = numeric())
if(nrow(unmatched_df) > 0){
if(nrow(CTD_info) == 0){print(paste("There is no CTD data for", ex))}else{
for(ctd in CTD_info$CTD_ID){
if(!grepl(ctd,ctd_files2)){
ctd_file = file.path(ctd_path,paste(ctd,"_ctd1.csv",sep = ""))}else{
file.path(ctd_path2,paste(ctd,"_ctd1.csv",sep = ""))
}
time_s = NA
time_b = NA
time_e = NA
# open file and read relevent lines
f <- file(ctd_file, open = "r" )
while( TRUE ){
line <- readLines( f, 1L ,skipNul = T)
if( grepl( "DATE =", line ) ){
date <- trimws(sub("DATE =", "", line ))
}
if( grepl( "CTD_START_TIME =", line ) ){
t_line = line
time_s<- trimws(sub("UTC","",sub("CTD_START_TIME =", "", line )))
}
if( grepl( "CTD_BOTTOM_TIME =", line ) ){
time_b <- trimws(sub("UTC","",sub( "CTD_BOTTOM_TIME =", "", line )))
}
if( grepl( "CTD_END_TIME =", line ) ){
time_e <- trimws(sub("UTC","",sub( "CTD_END_TIME =", "", line )))
}
if( grepl( "CTD_START_LATITUDE =", line ) ){
lat_s <- as.numeric(sub("CTD_START_LATITUDE =", "", line ))
}
if( grepl( "CTD_START_LONGITUDE =", line ) ){
lon_s <- as.numeric(sub("CTD_START_LONGITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LATITUDE =", line ) ){
lat_b <- as.numeric(sub("CTD_BOTTOM_LATITUDE =", "", line ))
}
if( grepl( "CTD_BOTTOM_LONGITUDE =", line ) ){
lon_b <- as.numeric(sub("CTD_BOTTOM_LONGITUDE =", "", line ))
}
if( grepl( "CTD_END_LATITUDE =", line ) ){
lat_e <- as.numeric(sub("CTD_END_LATITUDE =", "", line ))
}
if( grepl( "CTD_END_LONGITUDE =", line ) ){
lon_e <- as.numeric(sub("CTD_END_LONGITUDE =", "", line ))
}
if(grepl("CTDPRS", line)){break}
}
close(f)
times = as.POSIXct(c(paste(date,time_s), paste(date,time_b), paste(date,time_e)), format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
# check forward in time, if not add 24 hrs as likely crossed days.
if(!is.na(times[2]) & !is.na(times[1])){
t_diff_check = difftime(times[2], times[1], units = "secs")
if(t_diff_check < 0){times[2] = times[2] + (3600*24)}
}
if(!is.na(times[3]) & !is.na(times[1])){
t_diff_check = difftime(times[3], times[1], units = "secs")
if(t_diff_check < 0){times[3] = times[3] + (3600*24)}
}
# gather ctd information
CTD_df = CTD_df %>% add_row(CTD_ID = ctd, DATE = date, TIME_s = times[1], TIME_b= times[2], TIME_e= times[3], LAT_s = lat_s, LON_s = lon_s, LAT_b = lat_b, LON_b = lon_b, LAT_e = lat_e, LON_e = lon_e)
#
# intvls1 = c(270,270,270)*60
# intvls2 = c(270,270,270)*60
# tdx = which(is.finite(times))
# if(all(is.na(times))){print(paste("There is no time information in ctd file",ctd))}
# if(any(unmatched_df$Date == date)){
#   unmatched_df_sub = unmatched_df %>% filter(Date == date)
#   unmatched_df_sub_t = unmatched_df_sub %>% mutate(time_m = as.POSIXct(paste(Date,Time), format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))
#   unmatched_df_sub_p
#
#   # match closest times
#     max_t = max(times[tdx] + intvls1[tdx])
#     min_t = min(times[tdx] - intvls2[tdx])
#     res = unmatched_df_sub_t$time_m > min_t & unmatched_df_sub_t$time_m < max_t
#     if(length(which(res)) > 1){res = which.min(abs(unmatched_df_sub_t$time_m - min_t))} # get minimum time difference
#     if(any(res)){
#       data2$CTD_IDs[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = ctd
#       data2$STNNBR[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = stn
#       data2$CASTNO[data2_stncast == unmatched_df_sub_t$STNCAST[res]] = cast
#     }
#     }
}
### match closest times
col_t = c(3:5)[!colSums(is.na(CTD_df[3:5])) == nrow(CTD_df)]
if(!notime){
#calculate time differences
unmatched_df_t$closest_t = unlist(lapply(1:nrow(unmatched_df_t), calc.time.min))
unmatched_df_t$t_diff = unlist(lapply(1:nrow(unmatched_df_t), calc.time.diff))
# old code
# if(length(col_t) > 1){
#
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                   mutate(t_diff = abs(gather(CTD_df[,col_t])$value[closest_t] - time_m))}else{
# unmatched_df_t = unmatched_df_t %>% mutate(closest_t = which.min(abs(unlist(lapply(col_t, FUN = function(x){CTD_df[,x] - time_m}))))[1]) %>%
#                                       mutate(t_diff = abs(CTD_df[,col_t][closest_t] - time_m))
#                                   }
# check it is within 3 hours and assign CTD_ID
unmatched_df_t = unmatched_df_t %>% filter(!is.na(closest_t), t_diff < t_thresh*60*60)
# Any matches?
if(nrow(unmatched_df_t) > 0){
# get CTD_IDs
unmatched_df_t$CTD_ID = unlist(lapply(1:nrow(unmatched_df_t),function(x){r = CTD_df$CTD_ID[unmatched_df_t$closest_t[x]%%nrow(CTD_df)]
if(is.empty(r)){r = CTD_df$CTD_ID[nrow(CTD_df)]}
return(r)}))
# join with data 2 IDs
joined_t = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_t , by = "STNCAST")
}}
### match closest positions
# match with closest lat/lon on same date
d_calc = lapply(1:nrow(unmatched_df_p), calc.dist.min)
unmatched_df_p$dist_min  = unlist(lapply(d_calc,"[","min"))
unmatched_df_p$d_diff = unlist(lapply(d_calc,"[","diff"))
# check within distance threshold
unmatched_df_p  = unmatched_df_p %>% filter(d_diff < d_thresh)
# Any matches?
if(nrow(unmatched_df_p) > 0 & notime){
# if no time matches consider date of position matches.
unmatched_df_p = unmatched_df_p %>% mutate(Date_match = ifelse(Date == CTD_df$DATE[dist_min],T,F))
unmatched_df_p = unmatched_df_p %>% filter(Date_match)
}
if(nrow(unmatched_df_p) > 0){
# get CTD_ID
unmatched_df_p$CTD_ID = unlist(lapply(1:nrow(unmatched_df_p),function(x){CTD_df$CTD_ID[unmatched_df_p$dist_min[x]]}))
# join with data 2 IDs
joined_p = left_join(data.frame("STNCAST" = data2_stncast[un]),unmatched_df_p , by = "STNCAST")
if(exists("joined_t")){
# join with data 2 IDs
joined_t_p = left_join(joined_t,unmatched_df_p[,c("STNCAST","dist_min","d_diff")] , by = "STNCAST")
rm(joined_t)
}else{joined_t_p = joined_p
rm(joined_p)}
data2[un,c("CTD_IDs")] = joined_t_p$CTD_ID
rm(joined_t_p)}
}
}
}
rm(unmatched_df, CTD_df,times, joined_t, joined_t_p,joined_p, unmatched_df_p, unmatched_df_t)
}
rm(un)
# append CTD_ID, STNNBR, CASTNO, LAT, LON, DATE, TIME
# Now get the data from files that have identified matches
CTD_list = unique(data2$CTD_IDs)
CTD_list = CTD_list[!is.na(CTD_list)]
CTD_list = CTD_list[CTD_list != "U"]
# set up CTD data frame
if(length(CTD_list) > 0){
for(ctd in CTD_list){
if(!grepl(ctd,ctd_files2)){
ctd_file = file.path(ctd_path,paste(ctd,"_ctd1.csv",sep = ""))}else{
file.path(ctd_path2,paste(ctd,"_ctd1.csv",sep = ""))
}
idx = which(data2$CTD_IDs == ctd)
# open file and read relevent lines
f <- file( ctd_file, open = "r" )
while( TRUE ){
line <- readLines( f, 1L ,skipNul = T)
if( grepl( "DATE =", line ) ){
data2$DATE[idx] <- trimws(sub("DATE =", "", line ))
}
if( grepl( "CTD_START_TIME =", line ) ){
t_line = line
data2$TIME_s[idx] <- trimws(sub("UTC","",sub("CTD_START_TIME =", "", line )))
if(is.empty(data2$TIME_s[idx])){data2$TIME_s[idx] = NA}
}
if( grepl( "CTD_BOTTOM_TIME =", line ) ){
data2$TIME_b[idx] <- trimws(sub("UTC","",sub( "CTD_BOTTOM_TIME =", "", line )))
if(is.empty(data2$TIME_b[idx])){data2$TIME_b[idx] = NA}
}
if( grepl( "CTD_END_TIME =", line ) ){
data2$TIME_e[idx] <- trimws(sub("UTC","",sub( "CTD_END_TIME =", "", line )))
if(is.empty(data2$TIME_e[idx])){data2$TIME_e[idx] = NA}
}
if( grepl( "CTD_START_LATITUDE =", line ) ){
data2$LATITUDE[idx] <- sub("CTD_START_LATITUDE =", "", line )
}
if( grepl( "CTD_START_LONGITUDE =", line ) ){
data2$LONGITUDE[idx] <- sub("CTD_START_LONGITUDE =", "", line )
}
if( grepl( "CTD_BOTTOM_LATITUDE =", line ) ){
if(is.na(data2$LATITUDE[idx[1]])){data2$LATITUDE[idx] <- sub("CTD_BOTTOM_LATITUDE =", "", line )}
}
if( grepl( "CTD_BOTTOM_LONGITUDE =", line ) ){
if(is.na(data2$LONGITUDE[idx[1]])){data2$LONGITUDE[idx] <- sub("CTD_BOTTOM_LONGITUDE =", "", line )}
}
if( grepl( "CTD_END_LATITUDE =", line ) ){
if(is.na(data2$LATITUDE[idx[1]])){data2$LATITUDE[idx] <- sub("CTD_END_LATITUDE =", "", line )}
}
if( grepl( "CTD_END_LONGITUDE =", line ) ){
if(is.na(data2$LONGITUDE[idx[1]])){data2$LONGITUDE[idx] <- sub("CTD_END_LONGITUDE =", "", line )}
}
if( grepl( "STNNBR or EVENTNBR =", line ) ){
data2$STNNBR[idx] = trimws(sub("STNNBR or EVENTNBR =", "", line ))
}
if( grepl( "CASTNO =", line ) ){
data2$CASTNO[idx] = trimws(sub("CASTNO =", "", line ))
}
# if( grepl( "STNNBR or EVENTNBR =", line ) ){
#   if(as.character(data2$STNNBR[idx[1]]) != trimws(sub("STNNBR or EVENTNBR =", "", line ))){stop("station numbers dont match")}
# }
# if( grepl( "CASTNO =", line ) ){
#   if(as.character(data2$CASTNO[idx[1]]) != trimws(sub("CASTNO =", "", line ))){stop("station numbers dont match")}
# }
if(grepl("CTDPRS", line)){break}
}
close( f )
data2$CTD_match[idx] = 1
}}
rm(CTD_info_exact,CTD_info, CTD_list)
}
#data2 = data2[,which(colnames(data2) != "CTD_IDs")]
## something here for pulling from underway data
final_data = data2
ordered_names = c("CTD_IDs","DATE","TIME_s","TIME_b","TIME_e","LATITUDE","LONGITUDE","STNNBR",	"CASTNO",	"DATE_analyser",	"TIME_analyser",	"LAT_analyser",	"LON_analyser","STNNBR_analyser","CASTNO_analyser",	"Sample_ID",	"BOTTLE",	"DEPTH",pig_names)
ordered_units = c("NA","YYYY-mm-dd","HH:MM:SS","HH:MM:SS","HH:MM:SS","DEGREES NORTH","DEGREES EAST","NA",	"NA",	"YYYY-mm-dd","HH:MM:SS","DEGREES NORTH","DEGREES EAST","NA","NA",	"NA",	"NA",	"METERS",rep("MG/M3",length(pig_names)))
final_data = final_data[,ordered_names]
if(any(is.na(final_data$CTD_match))){
final_data$CTD_match[is.na(final_data$CTD_match)] = 0
}
rm(data2)
writeLines(paste("NUMBER_HEADERS = 6"), fd)
writeLines(paste("EXPOCODE =", ex), fd)
writeLines(paste("SHIP =",platforms$`Platform Name`[match(substr(ex,1,4), platforms$`NODC code`)]),fd)
writeLines(paste("TIMEZONE = UTC"), fd)
writeLines("missing_value = -999", fd)
writeLines("not_detected = -888", fd)
# assign missing value number
final_data$DATE = as.character(final_data$DATE)
final_data$DATE_analyser = as.character(final_data$DATE_analyser)
# remove rows with no pigment data
final_data = final_data[rowSums(matrix(unlist(lapply(as.matrix(final_data[,pig_names]),is.empty)), ncol = length(pig_names))) != length(pig_names),]
# remove columns with entire missing values
for(cl in ncol(final_data):19){
if(all(is.na(final_data[,cl]))){colnames(final_data)[cl] = NA
ordered_units = ordered_units[-cl]
}
}
final_data = final_data[,which(!is.na(colnames(final_data)))]
writeLines(toString(colnames(final_data)), fd)
# units = lapply(colnames(final_data),function(x){if(paste(x,"_u",sep = "") %in% colnames(info)){info[,paste(x,"_u",sep = "")]}else{NA}})
writeLines(toString(ordered_units), fd)
final_data[is.na(final_data)] <- -999
final_data[final_data == "NA"] <- -999
# reassign below detection limits value
if(!is.empty(info$not_detected_value)){
for(col in pig_names){
cdx = which(colnames(final_data) == col)
if(any(final_data[,cdx] == info$not_detected_value)){final_data[which(final_data[,cdx] == info$not_detected_value),cdx] = -888}
}}
for(row in 1:nrow(final_data))
{writeLines(toString(final_data[row,]),fd)}
close(fd)
print(paste("row",rw,"EXPOCODE",ex,"SOURCE",info$source,"METHOD",info$Method,"successfully run"))
### checks
# final_data$DEPTH = as.numeric(final_data$DEPTH)
# final_data$DEPTH[final_data$CTD_IDs == "U"] = "U"
if(any(final_data$STNNBR == -999)){print(paste("Warning:There is no station number assigned for a data point in",rw,ex," Is this point underway?"))}
#if(any(final_data$LATITUDE == -999 & final_data$STNNBR != "U" & final_data$DEPTH > 10 & !is.empty(final_data$DEPTH))){print(paste("Warning:There is some ctd data not matched, or missing",rw,ex,"for this many measurements", length(which(final_data$LATITUDE == -999 & final_data$STNNBR != "U" & final_data$DEPTH > 10 & !is.empty(final_data$DEPTH)))))}
rm(final_data)
if(exists("header_vars")){rm(header_vars)}
if(exists("CTD_IDs")){rm(CTD_IDs)}
if(exists("sub_meta")){rm(sub_meta)}
rm(data_vars,header_in_line,header_line,headers,line)
}
}
GITHUB_PAT = "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"
#set up Git
cred = git2r::cred_token(token = "GITHUB_PAT")
#set up Git
cred = git2r::cred_token(GITHUB_PAT)
setwd("../BIO-MATE/src/BIO-SHARE")
getwd()
setwd("./Projects/BIO-MATE/BIO-MATE/src/BIO-SHARE")
rm(GITHUB_PAT)
#set up Git
cred = git2r::cred_token(GITHUB_PAT)
#set up Git
cred = git2r::cred_token()
cred
git2r::push(repo, credentials = cred)
dirs = list.dirs(tempdir(),recursive = F)
if(length(grep("BIO-MATE",dirs)) == 0){
path <- file.path(tempfile(pattern="BIO-MATE-"), "BIO-MATE")
dir.create(path, recursive=TRUE)
repo <- clone("https://github.com/KimBaldry/BIO-MATE", path,credentials = cred)
}else{path = file.path(grep("BIO-MATE",dirs,value = T)[1], "BIO-MATE")
git2r::pull(path, credentials = cred)
repo = repository(path)
}
git2r::commit(repo, "BIO-SHARE Submission",session = T)
git2r::push(repo, credentials = cred)
git2r::commit(repo, "BIO-SHARE Submission",session = T)
git2r::push(repo, credentials = git2r::cred_token())
View(cred)
cred = git2r::cred_token()
dirs = list.dirs(tempdir(),recursive = F)
if(length(grep("BIO-MATE",dirs)) == 0){
path <- file.path(tempfile(pattern="BIO-MATE-"), "BIO-MATE")
dir.create(path, recursive=TRUE)
repo <- clone("https://github.com/KimBaldry/BIO-MATE", path,credentials = cred)
}else{path = file.path(grep("BIO-MATE",dirs,value = T)[1], "BIO-MATE")
git2r::pull(path, credentials = cred)
repo = repository(path)
}
config(repo,
user.name = "Kimberlee Baldry",
user.email = "baldry.kimberlee@gmail.com",token = cred)
git2r::push(repo, credentials = cred)
library(usethis)
edit_git_config()
help(config)
repo
config(repo,
user.name = "Kimberlee Baldry",
user.email = "baldry.kimberlee@gmail.com",token = cred)
edit_git_config()
getwd()
config(repo,
user.name = "Kimberlee Baldry",
user.email = "baldry.kimberlee@gmail.com",token = cred)
edit_git_config()
test = config(repo,
user.name = "Kimberlee Baldry",
user.email = "baldry.kimberlee@gmail.com",token = cred)
View(test)
config(repo,
user.name = "Kimberlee Baldry",
user.email = "baldry.kimberlee@gmail.com",token = cred)
git2r::push(repo, credentials = cred)
